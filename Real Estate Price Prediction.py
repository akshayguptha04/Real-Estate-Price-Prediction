# -*- coding: utf-8 -*-
"""Another copy of Machine Learning with Python (CS2202)Assignment.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/17gSgUEKyKK7WSLqGzpuw5lTtBHeJZNCU

## DATA EXPLORATION

# New Section
"""

from google.colab import drive
drive.mount('/content/drive')

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

# Loading the dataset
df = pd.read_csv("/content/drive/MyDrive/Gurgaon_RealEstate.csv")

# Display basic information and the first few rows of the dataset
print(df.info())
print(df.head())

# Remove duplicate rows
df = df.drop_duplicates()
print(f"Dataset shape after removing duplicates: {df.shape}")

# Explore 'property_type' column via bar plot
sns.countplot(data=df, x='property_type')
plt.title('Distribution of Property Types')
plt.xticks(rotation=45)
plt.show()

# Explore 'society' column and reduce cardinality
society_counts = df['society'].value_counts()
threshold = 10  # example threshold
filtered_societies = society_counts[society_counts > threshold].index
df = df[df['society'].isin(filtered_societies)]
print(f"Dataset shape after filtering societies: {df.shape}")

# Explore the 'price' column
print(df['price'].describe())
sns.histplot(df['price'], kde=True)
plt.title('Price Distribution')
plt.show()

sns.boxplot(x=df['price'])
plt.title('Price Outliers')
plt.show()

# Skewness and Kurtosis
print(f"Skewness: {df['price'].skew()}")
print(f"Kurtosis: {df['price'].kurtosis()}")

# Multivariate analysis: Property Type vs Price
sns.boxplot(x='property_type', y='price', data=df)
plt.xticks(rotation=45)
plt.title('Price Distribution by Property Type')
plt.show()

"""## MISSING VALUES HANDLING"""

# Check for missing values
print(df.isnull().sum())

# Handling missing values (Example: Imputation for 'bathroom' and 'bedroom')
df['bathroom'] = df['bathroom'].fillna(df['bathroom'].median())
df['bedRoom'] = df['bedRoom'].fillna(df['bedRoom'].mode()[0])

# Re-check for missing values
print(df.isnull().sum())

"""## OUTLIER DETECTION"""

# Example using IQR
Q1 = df['price'].quantile(0.25)
Q3 = df['price'].quantile(0.75)
IQR = Q3 - Q1
lower_bound = Q1 - 1.5 * IQR
upper_bound = Q3 + 1.5 * IQR

# Identifying outliers
outliers = df[(df['price'] < lower_bound) | (df['price'] > upper_bound)]
print(outliers)

# Visualize outliers
sns.boxplot(x=df['price'])
plt.title('Outliers in Price')
plt.show()

"""## OUTLIER HANDLING"""

# Handling outliers by capping
df['price'] = np.where(df['price'] > upper_bound, upper_bound, df['price'])
df['price'] = np.where(df['price'] < lower_bound, lower_bound, df['price'])

# Re-plot to check outlier handling
sns.boxplot(x=df['price'])
plt.title('Price after Outlier Handling')
plt.show()

"""## RANDOM FOREST FOR PRICE PREDICTION"""

from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler, OneHotEncoder
from sklearn.compose import ColumnTransformer
from sklearn.pipeline import Pipeline
from sklearn.impute import SimpleImputer

# Assuming 'price' is confirmed as the target column and is continuous

# Identify categorical and numerical columns
categorical_cols = df.select_dtypes(include=['object']).columns
numerical_cols = df.select_dtypes(exclude=['object']).columns.drop('price')  # Exclude the target column

# Create transformers for preprocessing
numeric_transformer = Pipeline(steps=[
    ('imputer', SimpleImputer(strategy='median')),
    ('scaler', StandardScaler())
])

categorical_transformer = Pipeline(steps=[
    ('imputer', SimpleImputer(strategy='most_frequent')),
    ('encoder', OneHotEncoder(handle_unknown='ignore'))
])

# Combine into a preprocessor
preprocessor = ColumnTransformer(
    transformers=[
        ('num', numeric_transformer, numerical_cols),
        ('cat', categorical_transformer, categorical_cols)
    ])

# Remove rows where the target variable 'price' is missing
df = df.dropna(subset=['price'])

# After cleaning, repeat the train-test split
X = df.drop('price', axis=1)
y = df['price']
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

from sklearn.ensemble import RandomForestRegressor
from sklearn.metrics import mean_squared_error

# Build the pipeline including the preprocessor and the regressor
rf_pipeline = Pipeline(steps=[
    ('preprocessor', preprocessor),
    ('regressor', RandomForestRegressor(n_estimators=100, random_state=42))
])

# Fit and predict
rf_pipeline.fit(X_train, y_train)
rf_predictions = rf_pipeline.predict(X_test)
rf_mse = mean_squared_error(y_test, rf_predictions)
print(f"Random Forest MSE: {rf_mse}")

from sklearn.linear_model import Lasso

# Build the pipeline for Lasso
lasso_pipeline = Pipeline(steps=[
    ('preprocessor', preprocessor),
    ('regressor', Lasso(alpha=0.01, random_state=42))
])

# Fit and predict
lasso_pipeline.fit(X_train, y_train)
lasso_predictions = lasso_pipeline.predict(X_test)
lasso_mse = mean_squared_error(y_test, lasso_predictions)
print(f"Lasso MSE: {lasso_mse}")

